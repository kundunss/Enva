@model IEnumerable<SistemApp.Models.SystemHardware>

@{
    ViewData["Title"] = "EnvaNetwork";
}

<div class="bg-white dark:bg-gray-800 shadow rounded-lg">
    <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
        <h1 class="text-2xl font-bold text-gray-900 dark:text-white">EnvaNetwork @ViewBag.SelectedCompanyName</h1>
    </div>
    
    <div class="p-6">
        @await Html.PartialAsync("_FilterPartial", ViewBag.Sites as IEnumerable<SistemApp.Models.Site>)
            <div class="flex gap-2">
                <a asp-action="Create" id="createBtn" class="inline-flex items-center px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-lg transition-colors duration-200">
                    <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                    </svg>
                    Yeni Ekle
                </a>
                <button onclick="exportToExcel()" class="inline-flex items-center px-4 py-2 bg-green-600 hover:bg-green-700 text-white font-medium rounded-lg transition-colors duration-200">
                    <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                    </svg>
                    Excel Dışa Aktar
                </button>
            </div>
        </div>
        <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
                <thead class="bg-gray-50 dark:bg-gray-700">
                    <tr>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                            Sıra No
                        </th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                            Ekipman Türü
                        </th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                            Açıklama
                        </th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                            IP Adresi
                        </th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                            Şifre
                        </th>

                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                            Şantiye
                        </th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                            İşlemler
                        </th>
                    </tr>
                </thead>
                <tbody class="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
                @{ int rowIndex = 1; }
                @foreach (var item in Model) {
                    <tr class="hover:bg-gray-50 dark:hover:bg-gray-700" data-company="@item.CompanyId" data-site="@item.SiteId">
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-100 font-medium">
                            @rowIndex
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-100">
                            @Html.DisplayFor(modelItem => item.EquipmentType!.Name)
                        </td>
                    @{ rowIndex++; }
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-100">
                            @Html.DisplayFor(modelItem => item.Description)
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-100">
                            @Html.DisplayFor(modelItem => item.IpAddress)
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-100">
                            <span class="password-field cursor-pointer text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300" data-password="@item.Password" title="Kopyalamak için tıklayın">
                                ••••••••
                            </span>
                        </td>

                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-100">
                            @Html.DisplayFor(modelItem => item.Site!.Name)
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium space-x-2">
                            <a asp-action="Edit" asp-route-id="@item.Id" class="inline-flex items-center px-3 py-1 bg-yellow-600 hover:bg-yellow-700 text-white text-xs font-medium rounded transition-colors duration-200">
                                <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                                </svg>
                                Düzenle
                            </a>
                            <a asp-action="Details" asp-route-id="@item.Id" class="inline-flex items-center px-3 py-1 bg-cyan-600 hover:bg-cyan-700 text-white text-xs font-medium rounded transition-colors duration-200">
                                <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                </svg>
                                Detaylar
                            </a>
                            <a asp-action="Delete" asp-route-id="@item.Id" class="inline-flex items-center px-3 py-1 bg-red-600 hover:bg-red-700 text-white text-xs font-medium rounded transition-colors duration-200">
                                <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                                </svg>
                                Sil
                            </a>
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const companyFilter = document.getElementById('companyFilter');
        const siteFilter = document.getElementById('siteFilter');
        const searchInput = document.getElementById('searchInput');
        const createBtn = document.getElementById('createBtn');
        const tableRows = document.querySelectorAll('tbody tr');
        
        // Company filter change event
        companyFilter.addEventListener('change', function() {
            const selectedCompanyId = this.value;
            
            // Filter sites based on selected company
            const siteOptions = siteFilter.querySelectorAll('option');
            siteOptions.forEach(option => {
                if (option.value === '') {
                    option.style.display = 'block';
                } else {
                    const companyId = option.getAttribute('data-company');
                    if (selectedCompanyId === '' || companyId === selectedCompanyId) {
                        option.style.display = 'block';
                    } else {
                        option.style.display = 'none';
                    }
                }
            });
            
            // Reset site filter if current selection is not valid
            if (selectedCompanyId !== '') {
                const currentSiteOption = siteFilter.querySelector(`option[value="${siteFilter.value}"]`);
                if (currentSiteOption && currentSiteOption.getAttribute('data-company') !== selectedCompanyId) {
                    siteFilter.value = '';
                }
            }
            
            // Update create button link
            updateCreateButton();
            
            // Filter table rows
            filterTable();
            
            // Update URL
            updateURL();
        });
        
        // Site filter change event
        siteFilter.addEventListener('change', function() {
            filterTable();
            updateURL();
        });
        
        // Search input event
        searchInput.addEventListener('input', function() {
            filterTable();
        });
        
        function updateCreateButton() {
            const selectedCompanyId = companyFilter.value;
            let href = '@Url.Action("Create", "SystemHardware")';
            if (selectedCompanyId) {
                href += '?companyId=' + selectedCompanyId;
            }
            createBtn.href = href;
        }
        
        // Filtreleme artık _FilterPartial.cshtml'de yapılıyor
        
        // Password field click to copy
        document.querySelectorAll('.password-field').forEach(field => {
            field.addEventListener('click', function() {
                const password = this.getAttribute('data-password');
                navigator.clipboard.writeText(password).then(() => {
                    // Show temporary feedback
                    const originalText = this.textContent;
                    this.textContent = 'Kopyalandı!';
                    setTimeout(() => {
                        this.textContent = originalText;
                    }, 1000);
                });
            });
        });
        
        // Initialize filters on page load
        updateCreateButton();
        filterTable();
    });

    function exportToExcel() {
        const siteSelect = document.getElementById('siteFilter');
        const selectedSiteId = siteSelect ? siteSelect.value : '';
        
        let url = '@Url.Action("ExportToExcel", "SystemHardware")';
        if (selectedSiteId) {
            url += '?siteId=' + selectedSiteId;
        }
        
        window.location.href = url;
    }
</script>